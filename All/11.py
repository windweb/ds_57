# Сравнение средних значений
'''
Интернет-магазин мармеладных червячков «Ползучая тянучка» разместил анимированного червяка-маскота на сайте. Нововведение «ползает» по экрану пользователя, пока тот выбирает товар. 
Посмотрите на две выборки средних чеков в интернет-магазине до и после запуска червячка. Напечатайте на экране значения средних до и после внедрения анимированного маскота. 
Проверьте гипотезу, что средний чек увеличился. Выберите уровень значимости, равный 5%. Выведите на экран значение p-value и результат проверки гипотезы.
'''
import pandas as pd
from scipy import stats as st

sample_before = pd.Series([
    436, 397, 433, 412, 367, 353, 440, 375, 414, 
    410, 434, 356, 377, 403, 434, 377, 437, 383,
    388, 412, 350, 392, 354, 362, 392, 441, 371, 
    350, 364, 449, 413, 401, 382, 445, 366, 435,
    442, 413, 386, 390, 350, 364, 418, 369, 369, 
    368, 429, 388, 397, 393, 373, 438, 385, 365,
    447, 408, 379, 411, 358, 368, 442, 366, 431,
    400, 449, 422, 423, 427, 361, 354])

sample_after = pd.Series([
    439, 518, 452, 505, 493, 470, 498, 442, 497, 
    423, 524, 442, 459, 452, 463, 488, 497, 500,
    476, 501, 456, 425, 438, 435, 516, 453, 505, 
    441, 477, 469, 497, 502, 442, 449, 465, 429,
    442, 472, 466, 431, 490, 475, 447, 435, 482, 
    434, 525, 510, 494, 493, 495, 499, 455, 464,
    509, 432, 476, 438, 512, 423, 428, 499, 492, 
    493, 467, 493, 468, 420, 513, 427])

print("Cреднее до:", sample_before.mean()) # < напишите код здесь >)
print("Cреднее после:", sample_after.mean()) # < напишите код здесь >)


# критический уровень статистической значимости
# если p-value окажется меньше него - отвергнем гипотезу
alpha = 0.05  # < напишите код здесь >)

results = st.ttest_ind(sample_before, sample_after) # передайте выборки до и после как аргументы функции)
    
# тест односторонний: p-value будет в два раза меньше
pvalue = results.pvalue / 2   # one-sided test # < напишите код здесь >)

print('p-значение: ', pvalue)

if pvalue < alpha:
    print("Отвергаем нулевую гипотезу: скорее всего средний чек увеличился")
else:
    print("Не получилось отвергнуть нулевую гипотезу: скорее всего средний чек не увеличился")
    
# ---
# Расчёт доверительного интервала

import pandas as pd
from scipy import stats as st

sample = pd.Series([
    439, 518, 452, 505, 493, 470, 498, 442, 497, 
    423, 524, 442, 459, 452, 463, 488, 497, 500,
    476, 501, 456, 425, 438, 435, 516, 453, 505, 
    441, 477, 469, 497, 502, 442, 449, 465, 429,
    442, 472, 466, 431, 490, 475, 447, 435, 482, 
    434, 525, 510, 494, 493, 495, 499, 455, 464,
    509, 432, 476, 438, 512, 423, 428, 499, 492, 
    493, 467, 493, 468, 420, 513, 427])

print("Cреднее:", sample.mean())

confidence_interval =  st.t.interval(  # < напишите код здесь >
    alpha=0.95,                   # confidence level (уровень доверия, равный единице минус уровень значимости)
    df=len(sample)-1,             # degrees of freedom — число степеней свободы, равное n-1.
    loc=sample.mean(),            # loc (от англ. location) — среднее распределение, равное оценке среднего
    scale=sample.sem()            # scale (англ. «масштаб») — стандартное отклонение распределения, равное оценке стандартной ошибки. можно записать так  scale=st.sem(sample)
)


print("95%-ый доверительный интервал:", confidence_interval)


# Бутстреп для доверительного интервала
1.
Процедурой бутстреп создайте 10 подвыборок и для каждой найдите 0.99-квантиль. Напечатайте их на экране через перенос строки.
Изучите функцию quantile() (англ. «квантиль значений») у объектов pandas.Series.


import pandas as pd
import numpy as np

data = pd.Series([
    10.7 ,  9.58,  7.74,  8.3 , 11.82,  9.74, 10.18,  8.43,  8.71,
     6.84,  9.26, 11.61, 11.08,  8.94,  8.44, 10.41,  9.36, 10.85,
    10.41,  8.37,  8.99, 10.17,  7.78, 10.79, 10.61, 10.87,  7.43,
     8.44,  9.44,  8.26,  7.98, 11.27, 11.61,  9.84, 12.47,  7.8 ,
    10.54,  8.99,  7.33,  8.55,  8.06, 10.62, 10.41,  9.29,  9.98,
     9.46,  9.99,  8.62, 11.34, 11.21, 15.19, 20.85, 19.15, 19.01,
    15.24, 16.66, 17.62, 18.22, 17.2 , 15.76, 16.89, 15.22, 18.7 ,
    14.84, 14.88, 19.41, 18.54, 17.85, 18.31, 13.68, 18.46, 13.99,
    16.38, 16.88, 17.82, 15.17, 15.16, 18.15, 15.08, 15.91, 16.82,
    16.85, 18.04, 17.51, 18.44, 15.33, 16.07, 17.22, 15.9 , 18.03,
    17.26, 17.6 , 16.77, 17.45, 13.73, 14.95, 15.57, 19.19, 14.39,
    15.76])

state = np.random.RandomState(12345)

for i in range(10):
    subsample = data.sample(frac=1, replace=True, random_state=state)
    print(subsample.quantile(0.99))  # < напишите код здесь >))



Функция quantile() в объектах pandas.Series используется для вычисления квантилей серии. Она принимает в качестве аргумента число с плавающей точкой q, где 0 <= q <= 1, и возвращает соответствующий квантиль серии. Например, series.quantile(0.5) возвращает медиану серии.

По умолчанию функция quantile() вычисляет квантиль выборки, используя метод, указанный в параметре q. Возможными методами являются:

    "linear": Интерполяция двух ближайших значений (по умолчанию).
    "lower": Выбор последнего наблюдения ниже квантиля.
    "higher": Выбрать первое наблюдение выше квантиля.
    "nearest": Выберите ближайшее к квантилю наблюдение.
    "midpoint": Среднее значение последнего наблюдения ниже и первого наблюдения выше квантиля.

Например, series.quantile(0.25, method="lower") возвращает нижний квартиль серии, используя метод "lower".


2.
Процедурой бутстреп найдите 90%-й доверительный интервал для 0.99-квантиля. Сохраните начало интервала в переменной lower, а конец — в upper. Код выведет их на экран.
Функцию quantile() вызовите дважды: сначала для получения 0.99-квантиля от каждой подвыборки, а потом для построения доверительного интервала.
    
import pandas as pd
import numpy as np

data = pd.Series([
    10.7 ,  9.58,  7.74,  8.3 , 11.82,  9.74, 10.18,  8.43,  8.71,
     6.84,  9.26, 11.61, 11.08,  8.94,  8.44, 10.41,  9.36, 10.85,
    10.41,  8.37,  8.99, 10.17,  7.78, 10.79, 10.61, 10.87,  7.43,
     8.44,  9.44,  8.26,  7.98, 11.27, 11.61,  9.84, 12.47,  7.8 ,
    10.54,  8.99,  7.33,  8.55,  8.06, 10.62, 10.41,  9.29,  9.98,
     9.46,  9.99,  8.62, 11.34, 11.21, 15.19, 20.85, 19.15, 19.01,
    15.24, 16.66, 17.62, 18.22, 17.2 , 15.76, 16.89, 15.22, 18.7 ,
    14.84, 14.88, 19.41, 18.54, 17.85, 18.31, 13.68, 18.46, 13.99,
    16.38, 16.88, 17.82, 15.17, 15.16, 18.15, 15.08, 15.91, 16.82,
    16.85, 18.04, 17.51, 18.44, 15.33, 16.07, 17.22, 15.9 , 18.03,
    17.26, 17.6 , 16.77, 17.45, 13.73, 14.95, 15.57, 19.19, 14.39,
    15.76])

state = np.random.RandomState(12345)

# сохраните значения 99%-квантилей в переменной values
values = []
for i in range(1000):
    subsample = data.sample(frac=1, replace=True, random_state=state)
    # < напишите код здесь >
    values.append(subsample.quantile(0.99))

# < напишите код здесь >
# вычислим 90% доверительный интервал для 0,99-квантиля
values = pd.Series(values)  # преобразуем тип для удобства
lower = values.quantile(0.05)  
upper = values.quantile(0.95)  

print(lower)
print(upper)

